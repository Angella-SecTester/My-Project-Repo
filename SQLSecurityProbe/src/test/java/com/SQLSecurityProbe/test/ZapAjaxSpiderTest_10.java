package com.SQLSecurityProbe.test;

import java.io.IOException;
import java.util.List;

import org.openqa.selenium.Proxy;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.zaproxy.clientapi.core.Alert;
import org.zaproxy.clientapi.core.ApiResponse;
import org.zaproxy.clientapi.core.ApiResponseElement;
import org.zaproxy.clientapi.core.ApiResponseList;
import org.zaproxy.clientapi.core.ClientApi;
import org.zaproxy.clientapi.core.ClientApiException;

import java.io.File;
import java.io.FileWriter;
import java.io.PrintWriter;

public class ZapAjaxSpiderTest_10 {
	// Configuration for ZAP and the target application
	private static final String ZAP_ADDRESS = "localhost";
	private static final int ZAP_PORT = 8080;
	private static final String ZAP_API_KEY = "hi1ki1dqrbighvon21l8k1dc66"; // Set your ZAP API key here
	private static final String TARGET_URL = "http://localhost:3000";
	private static final String OUTPUT_FILE = "zap_ajspider_results.txt";
	private static final String ALERTS_FILE = "zap_alerts_results.csv";

	public static void main(String[] args) {
		// Step 1: Set up ZAP proxy
		Proxy proxy = new Proxy();
		proxy.setHttpProxy(ZAP_ADDRESS + ":" + ZAP_PORT);
		proxy.setSslProxy(ZAP_ADDRESS + ":" + ZAP_PORT);

		ChromeOptions options = new ChromeOptions();
		options.setProxy(proxy);

		// Step 2: Set up Selenium WebDriver with proxy settings
		WebDriver driver = new ChromeDriver(options);

		// Step 3: Perform actions using Selenium (e.g., navigate to the Juice Shop
		// homepage)
		try {
			driver.get(TARGET_URL);

			// Example: Perform some interaction if necessary
			// WebElement someElement = driver.findElement(By.id("some-id"));
			// someElement.click();

			// Step 4: Set up ZAP client API
			ClientApi zapApi = new ClientApi(ZAP_ADDRESS, ZAP_PORT, ZAP_API_KEY);

			// Step 5: Start the AJAX Spider
			System.out.println("Starting AJAX Spider on " + TARGET_URL);
			zapApi.ajaxSpider.scan(TARGET_URL, null, null, null);

			// Step 6: Wait for the AJAX Spider to complete
			while (true) {
				ApiResponse statusResponse = zapApi.ajaxSpider.status();
				String status = ((ApiResponseElement) statusResponse).getValue();
				System.out.println("AJAX Spider status: " + status);
				if ("stopped".equalsIgnoreCase(status)) {
					break;
				}
				Thread.sleep(5000); // Wait for 5 seconds before checking again
			}

			System.out.println("AJAX Spider completed.");

			// Retrieve the list of crawled URLs
			ApiResponseList crawledUrlsResponse = (ApiResponseList) zapApi.ajaxSpider.results(null, null);
			List<ApiResponse> urlsList = crawledUrlsResponse.getItems();

			// Print the number of URLs crawled
			System.out.println("Number of URLs crawled: " + urlsList.size());

			// Convert the results to a JSON formatted string
			String jsonResults = crawledUrlsResponse.toString(2);

			// Save the results to a file (overwrite if it exists)
			saveResultsToFile(OUTPUT_FILE, jsonResults);

			System.out.println("Results saved to " + OUTPUT_FILE);

			// Step 7: Retrieve the alerts generated by ZAP
			List<Alert> alerts = zapApi.getAlerts(TARGET_URL, -1, -1);

			// Convert the alerts to a JSON formatted string
			String jsonAlerts = alerts.toString();
			
			// Print the total number of alerts
            System.out.println("Total number of alerts: " + alerts.size());

			// Save the alerts to a file (overwrite if it exists)
			saveResultsToFile(ALERTS_FILE, jsonAlerts);

			System.out.println("Alerts saved to " + ALERTS_FILE);

		} catch (ClientApiException | InterruptedException e) {
			e.printStackTrace();
		} finally {
			// Step 7: Clean up
			driver.quit();
		}
	}

	// Method to save results to a file, overwriting if it exists
	private static void saveResultsToFile(String filePath, String content) {
		File file = new File(filePath);
		try (PrintWriter writer = new PrintWriter(new FileWriter(file, false))) {
			writer.write(content);
			writer.flush();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

}
